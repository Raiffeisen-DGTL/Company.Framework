<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ViennaNET.Word</name>
    </assembly>
    <members>
        <member name="T:ViennaNET.Word.Barcode.BarWeight">
            <summary>
            Определяет толщину модуля.
            </summary>
        </member>
        <member name="F:ViennaNET.Word.Barcode.BarWeight.Single">
            <summary>
            Одинарная.
            </summary>
        </member>
        <member name="F:ViennaNET.Word.Barcode.BarWeight.Double">
            <summary>
            Двойная.
            </summary>
        </member>
        <member name="T:ViennaNET.Word.Barcode.Code128">
            <summary>
            Представляет реализацию стандарта штрихкода Code 128.
            </summary>
        </member>
        <member name="F:ViennaNET.Word.Barcode.Code128._patterns">
            <summary>
            Массив шаблонов (знаков) символа, представляющих структуру символа.
            </summary>
            <remarks>
            Каждый знак символа для данных состоит из шести элементов 
            (трех штрихов и трех пробелов, расположенных поочередно в направлении слева направо, начиная со штриха)
            Каждая строка массива это значение знака символа, каждый столбец это ширина эелемента в модулях.
            Первый столбец - ширина штриха, второй столбец - ширина пробела и т. д.
            Строки с 103 по 104 - это знак Start.
            Строка с индексом 106 - это знак Stop-символа и состоит из 7 элементов (четырёх штрихов и трех пробелов).
            Каждый пробел или штрих может содержать от 1 до 4 модулей (максимальная ширина) элемента.
            Сумма модулей в штрихах в любом знаке символа всегда должна быть четной (четный паритет), 
            поэтому сумма модулей в пробелах всегда должна быть нечетной.
            Суммарная длина всех штрихов и всех пробелов 11 модулей, для знака сивола Stop длина 13 модулей.
            </remarks>
        </member>
        <member name="M:ViennaNET.Word.Barcode.Code128.Barcode(System.String,System.Boolean,ViennaNET.Word.Barcode.BarWeight,System.Int32,System.Boolean)">
            <summary>
              Сформировать изображение бар-кода.
            </summary>
            <param name="text">Строка для шифрования.</param>
            <param name="force_code_b">Признак, определяющий набор таблиц шифрования.</param>
            <param name="bar_weight">Толщина модуля.</param>
            <param name="height">Высота изображения бар-кода.</param>
            <param name="add_quiet_zone">true, если необходимо добавить отступы слева и справа, в противном случае - false.</param>
            <returns>Возвращает изображение бар-кода.</returns>
        </member>
        <member name="M:ViennaNET.Word.Barcode.Code128.CalculateSymbolSign(System.Int32[])">
            <summary>
            Рассчитывает значение контрольного знака символа Code 128.
            </summary>
            <param name="tokens">Массив знаков символа.</param>
            <returns>Возвращает значение контрольного знака символа.</returns>
            <remarks>
            Каждой позиции знака символа присваивают весовой коэффициент.
            Первый знак, токен с индексом 0 имеет вес равный 1.
            Знаки данных начиная с индекса 1 до конца массива имеют веса равные их индексу в массиве.
            В массиве знаков, на данном этапе, не должно быть знака STOP и контрольного знака.
            </remarks>
        </member>
        <member name="M:ViennaNET.Word.Barcode.Code128.Encode(System.String,System.Boolean)">
            <summary>
            Выполняет кодирование входящей строки в символы штрих-кода Code 128.
            </summary>
            <param name="value">Кодируемое сообщение.</param>
            <param name="forceCodeB">-?</param>
            <returns>Последовательность значений знаков Code 128.</returns>
        </member>
        <member name="M:ViennaNET.Word.Barcode.Code128.GetValuesCodeB(System.String)">
            <summary>
            Кодирует входную строку по кодовой таблице Code B.
            </summary>
            <param name="sData">Входная строка.</param>
            <returns>Значение знака в кодовой таблице Code B.</returns>
        </member>
        <member name="M:ViennaNET.Word.Barcode.Code128.GetValuesCodeC(System.String)">
            <summary>
            Кодирует входную строку по кодовой таблице Code C.
            </summary>
            <param name="sData">Входная строка.</param>
            <returns>Значение знака в кодовой таблице Code C.</returns>
        </member>
        <member name="T:ViennaNET.Word.Barcode.ModulesCount">
            <summary>
            Определяет количество модулей пары: штрих - пробел.
            </summary>
        </member>
        <member name="P:ViennaNET.Word.Barcode.ModulesCount.Bar">
            <summary>
            Количество модулей в штрихе.
            </summary>
        </member>
        <member name="P:ViennaNET.Word.Barcode.ModulesCount.Space">
            <summary>
            Количество модулей в пробеле.
            </summary>
        </member>
        <member name="P:ViennaNET.Word.Barcode.ModulesCount.Total">
            <summary>
            Суммарное количество модулей пары: штрих - пробел.
            </summary>
        </member>
        <member name="T:ViennaNET.Word.Document">
            <summary>
            Предоставляет базовую реализацию для расширяемой модели документов Open Xml.
            </summary>
        </member>
        <member name="M:ViennaNET.Word.Document.FillSdtElement(System.String,System.String)">
            <summary>
            Выполняет поиск <see cref="T:DocumentFormat.OpenXml.Wordprocessing.SdtElement"/> с указаным именем 
            и вставляет указаное значение в дочерний элемент <see cref="T:DocumentFormat.OpenXml.Wordprocessing.Text"/>.
            </summary>
            <param name="name">Значение указаное <see cref="T:DocumentFormat.OpenXml.Wordprocessing.SdtAlias"/> искомого <see cref="T:DocumentFormat.OpenXml.Wordprocessing.SdtElement"/>.</param>
            <param name="value">Тексn для вставки в дочерний элемент <see cref="T:DocumentFormat.OpenXml.Wordprocessing.Text"/>.</param>
            <exception cref="T:ViennaNET.Word.InvalidSdtElementException">
            Возникает если <see cref="T:DocumentFormat.OpenXml.Wordprocessing.SdtElement"/> содержит более 1 элемента <see cref="T:DocumentFormat.OpenXml.Wordprocessing.Text"/>
            или <see cref="T:DocumentFormat.OpenXml.Wordprocessing.SdtElement"/> не содержит дочернего элемента <see cref="T:DocumentFormat.OpenXml.Wordprocessing.Text"/>.
            </exception>
        </member>
        <member name="P:ViennaNET.Word.Document.FileName">
            <summary>
            Получает значение представляющее полный путь для сохранения документа.
            </summary>
        </member>
        <member name="T:ViennaNET.Word.InvalidSdtElementException">
            <summary>
            Исключени которое возникает если дерево дочерних элементов <see cref="T:DocumentFormat.OpenXml.Wordprocessing.SdtElement"/> содержит недопустимые элементы
            или отсутствует обязательный дочерний элемент.
            </summary>
        </member>
        <member name="M:ViennaNET.Word.InvalidSdtElementException.#ctor(System.String)">
            <summary>
            Создаёт и инициализирует новый экземпляр класса <see cref="T:ViennaNET.Word.InvalidSdtElementException"/>.
            </summary>
            <param name="name">Значение <see cref="T:DocumentFormat.OpenXml.Wordprocessing.SdtAlias"/> представляющее имя искомого элемента.</param>
        </member>
        <member name="P:ViennaNET.Word.InvalidSdtElementException.Message">
            <summary>
            Получает сообщение, которое описывает текущее исключение.
            </summary>
        </member>
        <member name="T:ViennaNET.Word.IWordDocumentFactory">
            <summary>
            Представляет фабрику по созданию <see cref="!:Wordproce"/>.
            </summary>
        </member>
        <member name="M:ViennaNET.Word.IWordDocumentFactory.Create``1(``0,System.IO.MemoryStream)">
            <summary>
            Создаёт на основании шаблона документа Word экземпляр класса производного от <see cref="T:ViennaNET.Word.Document"/>.
            </summary>
            <typeparam name="T">Тип реализующий <see cref="T:ViennaNET.Word.Document"/>.</typeparam>
            <param name="templateContent">Содержимое файла шаблона документа Word.</param>
            <returns>Новый экземпляр типа реализующего <see cref="T:ViennaNET.Word.Document"/>.</returns>
        </member>
        <member name="M:ViennaNET.Word.IWordDocumentFactory.Create``1(``0,System.String)">
            <summary>
            Создаёт на основании шаблона документа Word экземпляр класса производного от <see cref="T:ViennaNET.Word.Document"/>.
            </summary>
            <typeparam name="T">Тип реализующий <see cref="T:ViennaNET.Word.Document"/>.</typeparam>
            <param name="templateFileName">Путь до файла шаблона.</param>
            <returns>Новый экземпляр типа реализующего <see cref="T:ViennaNET.Word.Document"/>.</returns>
        </member>
    </members>
</doc>
